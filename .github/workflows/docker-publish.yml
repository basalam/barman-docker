name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: "35 3 * * *"
  push:
    branches:
      - main

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  LATEST_BUILT_BARMAN: ${{ secrets.LATEST_BUILT_BARMAN }}

jobs:
  build:
    runs-on: ubuntu-latest
    # permissions:
    #   contents: read
    #   packages: write
    #   id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.0.3
        with:
          cosign-release: "v1.11.0"

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Get Barman Latest Release
        id: barman_version
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          excludes: draft,prerelease
          repository: EnterpriseDB/barman

      - name: Remove `release/` from barman tag name
        uses: mad9000/actions-find-and-replace-string@1
        id: generatetag
        with:
          source: ${{ steps.barman_version.outputs.release }}
          find: "release/"
          replace: ""

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push-release
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825
        if: (env.LATEST_BUILT_BARMAN != steps.generatetag.outputs.value) || (github.event_name == 'push')
        with:
          context: .
          build-args: |
            BARMAN_VERSION=${{ steps.generatetag.outputs.value }}
            SOURCE_INSTALL=0
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.generatetag.outputs.value }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (Nightly)
        id: build-and-push-nightly
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825
        with:
          context: .
          build-args: |
            BARMAN_VERSION=${{ steps.generatetag.outputs.value }}
            SOURCE_INSTALL=1
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: "LATEST_BUILT_BARMAN"
          value: "${{ steps.generatetag.outputs.value }}"
          token: ${{ secrets.SECRET_UPDATE_TOKEN }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   env:
      #     COSIGN_EXPERIMENTAL: "true"
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
